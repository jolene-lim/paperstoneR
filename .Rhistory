}
return(df)
}
many_rounds("paper", 10)
many_rounds(1, 10)
#' Play Scissors-Paper-Stone obsessively!
#'
#' @description
#' Play Scissors-Paper-Stone against R multiple times.
#'
#' @param x Either "scissors" (or 1), "stone" (or 2), or "paper" (or 3)
#' @param rounds Number of rounds
#' @return A dataframe containing the following columns for each iteration:
#' \item{Round}{Round number}
#' \item{Player}{Player's Throw}
#' \item{R}{R's Throw}
#' \item{Result}{Result for Player}
#' @examples
#' paperstone(1)
#' sps_pair("stone")
many_rounds <- function(x, rounds = 3, print = TRUE) {
rounds <- as.integer(rounds)
if (is.integer(x)) {x <- sps_pair(x)}
if (is.character(x)) {x <- str_to_title(x)}
user <- sps_pair(x)
if (is.na(rounds)) {"Please enter an integer value for number of attempts!"}
if (user == 4) {
return("Please enter 'scissors'(1), 'stone'(2) or 'paper'(3)!")
}
df = data.frame(Round = numeric(), Player = character(), R = character(), Result = character(),
stringsAsFactors = FALSE)
for (i in 1:rounds) {
sys <- round(runif(1, 1, 3), 0)
if (user == 1 & sys == 3) {
result <- "Win"
} else if (user > sys) {
result <- "Win"
} else if (user == sys) {
result <- "Tie"
} else {
result <- "Lose"
}
df[i, ] <- c(i, x, sps_pair(sys), result)
}
return(df)
}
many_rounds(2, 10)
x = "hi"
x < 3
x = "2"
x <2
x = "2"
x <3
#' Play Scissors-Paper-Stone obsessively!
#'
#' @description
#' Play Scissors-Paper-Stone against R multiple times.
#'
#' @param x Either "scissors" (or 1), "stone" (or 2), or "paper" (or 3)
#' @param rounds Number of rounds
#' @return A dataframe containing the following columns for each iteration:
#' \item{Round}{Round number}
#' \item{Player}{Player's Throw}
#' \item{R}{R's Throw}
#' \item{Result}{Result for Player}
#' @examples
#' paperstone(1)
#' sps_pair("stone")
many_rounds <- function(x, rounds = 3, print = TRUE) {
rounds <- as.integer(rounds)
if (x < 4) {x <- sps_pair(x)}
if (is.character(x)) {x <- str_to_title(x)}
user <- sps_pair(x)
if (is.na(rounds)) {"Please enter an integer value for number of attempts!"}
if (user == 4) {
return("Please enter 'scissors'(1), 'stone'(2) or 'paper'(3)!")
}
df = data.frame(Round = numeric(), Player = character(), R = character(), Result = character(),
stringsAsFactors = FALSE)
for (i in 1:rounds) {
sys <- round(runif(1, 1, 3), 0)
if (user == 1 & sys == 3) {
result <- "Win"
} else if (user > sys) {
result <- "Win"
} else if (user == sys) {
result <- "Tie"
} else {
result <- "Lose"
}
df[i, ] <- c(i, x, sps_pair(sys), result)
}
return(df)
}
many_rounds(3, 10)
?many_rounds
document()
#' Play Scissors-Paper-Stone obsessively!
#'
#' @description
#' Play Scissors-Paper-Stone against R multiple times.
#'
#' @param x Either "Scissors" (or 1), "Stone" (or 2), or "Paper" (or 3)
#' @param rounds Number of rounds
#' @return A dataframe containing the following columns for each iteration:
#' \item{Round}{Round number}
#' \item{Player}{Player's Throw}
#' \item{R}{R's Throw}
#' \item{Result}{Result for Player}
#' @examples
#' paperstone("stone")
#' paperstone(3)
#' paperstone("paper", 10)
paperstone <- function(x, rounds = 3) {
rounds <- as.integer(rounds)
if (x < 4) {x <- sps_pair(x)}
if (is.character(x)) {x <- str_to_title(x)}
user <- sps_pair(x)
if (is.na(rounds)) {"Please enter an integer value for number of attempts!"}
if (user == 4) {
return("Please enter 'scissors'(1), 'stone'(2) or 'paper'(3)!")
}
df = data.frame(Round = numeric(), Player = character(), R = character(), Result = character(),
stringsAsFactors = FALSE)
for (i in 1:rounds) {
sys <- round(runif(1, 1, 3), 0)
if (user == 1 & sys == 3) {
result <- "Win"
} else if (user > sys) {
result <- "Win"
} else if (user == sys) {
result <- "Tie"
} else {
result <- "Lose"
}
df[i, ] <- c(i, x, sps_pair(sys), result)
}
return(df)
}
document()
?paperstone
document()
#' Calculate your results from your Scissors-Paper-Stone game!
#'
#' @description
#' Calculates the proportion of a certain outcome for a game of Scissors-Paper-Stone!
#'
#' @param df Dataframe containing output of paperstone()
#' @param outcome Outcome type to be counted, default = "Win"
#' @return The proportion of that outcome in the game.
#' @examples
#' win_stats(game)
#' win_stats(game, "Tie")
win_stats <- function(game, outcome = "Win") {
subset <- game[Result == outcome, ]
output <- nrow(subset) / nrow(game)
return(output)
}
?win_stats
document()
?win_stats
win_stats(hi)
#' Calculate your results from your Scissors-Paper-Stone game!
#'
#' @description
#' Calculates the proportion of a certain outcome for a game of Scissors-Paper-Stone!
#'
#' @param df Dataframe containing output of paperstone()
#' @param outcome Outcome type to be counted, default = "Win"
#' @return The proportion of that outcome in the game.
#' @examples
#' win_stats(game)
#' win_stats(game, "Tie")
win_stats <- function(game, outcome = "Win") {
subset <- game[game$Result == outcome, ]
output <- nrow(subset) / nrow(game)
return(output)
}
win_stats(hi)
View(hi)
#' Calculate your results from your Scissors-Paper-Stone game!
#'
#' @description
#' Calculates the proportion of a certain outcome for a game of Scissors-Paper-Stone!
#'
#' @param df Dataframe containing output of paperstone()
#' @param outcome Outcome type to be counted, default = "Win"
#' @return The proportion of that outcome in the game.
#' @examples
#' win_stats(game)
#' win_stats(game, "Tie")
win_stats <- function(game, outcome = "Win") {
subset <- game[game$Result == outcome, ]
output <- nrow(subset) / nrow(game) * 100
return(output)
}
hi = paperstone("paper", 10)
View(hi)
"hi" == "Hi"
View(hi)
#' Play Scissors-Paper-Stone obsessively!
#'
#' @description
#' Play Scissors-Paper-Stone against R multiple times.
#'
#' @param x Either "Scissors" (or 1), "Stone" (or 2), or "Paper" (or 3)
#' @param rounds Number of rounds, default = 3
#' @return A dataframe containing the following columns for each iteration:
#' \item{Round}{Round number}
#' \item{Player}{Player's Throw}
#' \item{R}{R's Throw}
#' \item{Result}{Result for Player either "Win", "Tie" or "Lose"}
#' @examples
#' paperstone("stone")
#' paperstone(3)
#' paperstone("paper", 10)
paperstone <- function(x, rounds = 3) {
rounds <- as.integer(rounds)
if (x < 4) {x <- sps_pair(x)}
if (is.character(x)) {x <- str_to_title(x)}
user <- sps_pair(x)
if (is.na(rounds)) {"Please enter an integer value for number of attempts!"}
if (user == 4) {
return("Please enter 'scissors'(1), 'stone'(2) or 'paper'(3)!")
}
df = data.frame(Round = numeric(), Player = character(), R = character(), Result = character(),
stringsAsFactors = FALSE)
for (i in 1:rounds) {
sys <- round(runif(1, 1, 3), 0)
if (user == 1 & sys == 3) {
result <- "Win"
} else if (user > sys) {
result <- "Win"
} else if (user == sys) {
result <- "Tie"
} else if (user < sys) {
result <- "Lose"
}
df[i, ] <- c(i, x, sps_pair(sys), result)
}
return(df)
}
hi = paperstone("paper", 10)
hi = paperstone(3, 10)
View(hi)
hi = paperstone(2, 10)
View(hi)
"hi" < 4
#' Play Scissors-Paper-Stone obsessively!
#'
#' @description
#' Play Scissors-Paper-Stone against R multiple times.
#'
#' @param x Either "Scissors" (or 1), "Stone" (or 2), or "Paper" (or 3)
#' @param rounds Number of rounds, default = 3
#' @return A dataframe containing the following columns for each iteration:
#' \item{Round}{Round number}
#' \item{Player}{Player's Throw}
#' \item{R}{R's Throw}
#' \item{Result}{Result for Player either "Win", "Tie" or "Lose"}
#' @examples
#' paperstone("stone")
#' paperstone(3)
#' paperstone("paper", 10)
paperstone <- function(x, rounds = 3) {
rounds <- as.integer(rounds)
if (x < 4) {x <- sps_pair(x)}
if (is.character(x)) {x <- str_to_title(x)}
user <- sps_pair(x)
if (is.na(rounds)) {"Please enter an integer value for number of attempts!"}
if (user == 4) {
return("Please enter 'scissors'(1), 'stone'(2) or 'paper'(3)!")
}
df = data.frame(Round = numeric(), Player = character(), R = character(), Result = character(),
stringsAsFactors = FALSE)
for (i in 1:rounds) {
sys <- round(runif(1, 1, 3.5), 0)
if (user == 1 & sys == 3) {
result <- "Win"
} else if (user > sys) {
result <- "Win"
} else if (user == sys) {
result <- "Tie"
} else if (user < sys) {
result <- "Lose"
}
df[i, ] <- c(i, x, sps_pair(sys), result)
}
return(df)
}
paperstone(1, 10)
runif(10, 1, 3.5)
paperstone(1, 10)
paperstone("paper", 10)
paperstone("paper", 10)
"hi" < 4
#' Play Scissors-Paper-Stone obsessively!
#'
#' @description
#' Play Scissors-Paper-Stone against R multiple times.
#'
#' @param x Either "Scissors" (or 1), "Stone" (or 2), or "Paper" (or 3)
#' @param rounds Number of rounds, default = 3
#' @return A dataframe containing the following columns for each iteration:
#' \item{Round}{Round number}
#' \item{Player}{Player's Throw}
#' \item{R}{R's Throw}
#' \item{Result}{Result for Player either "Win", "Tie" or "Lose"}
#' @examples
#' paperstone("stone")
#' paperstone(3)
#' paperstone("paper", 10)
paperstone <- function(x, rounds = 3) {
rounds <- as.integer(rounds)
if (x < 4) {x <- sps_pair(x)}
if (is.character(x)) {x <- str_to_title(x)}
user <- sps_pair(x)
if (is.na(rounds)) {"Please enter an integer value for number of attempts!"}
if (user == 4) {
return("Please enter 'scissors'(1), 'stone'(2) or 'paper'(3)!")
}
df = data.frame(Round = numeric(), Player = character(), R = character(), Result = character(),
stringsAsFactors = FALSE)
for (i in 1:rounds) {
sys <- round(runif(1, 1, 3.5), 0)
if (user == 1 & sys == 3) {
result <- "Win"
} else if (user == 3 & sys == 1) {
result <- "Lose"
}
} else if (user > sys) {
result <- "Win"
} else if (user == sys) {
result <- "Tie"
} else if (user < sys) {
result <- "Lose"
}
df[i, ] <- c(i, x, sps_pair(sys), result)
}
return(df)
}
#' Play Scissors-Paper-Stone obsessively!
#'
#' @description
#' Play Scissors-Paper-Stone against R multiple times.
#'
#' @param x Either "Scissors" (or 1), "Stone" (or 2), or "Paper" (or 3)
#' @param rounds Number of rounds, default = 3
#' @return A dataframe containing the following columns for each iteration:
#' \item{Round}{Round number}
#' \item{Player}{Player's Throw}
#' \item{R}{R's Throw}
#' \item{Result}{Result for Player either "Win", "Tie" or "Lose"}
#' @examples
#' paperstone("stone")
#' paperstone(3)
#' paperstone("paper", 10)
paperstone <- function(x, rounds = 3) {
rounds <- as.integer(rounds)
if (x < 4) {x <- sps_pair(x)}
if (is.character(x)) {x <- str_to_title(x)}
user <- sps_pair(x)
if (is.na(rounds)) {"Please enter an integer value for number of attempts!"}
if (user == 4) {
return("Please enter 'scissors'(1), 'stone'(2) or 'paper'(3)!")
}
df = data.frame(Round = numeric(), Player = character(), R = character(), Result = character(),
stringsAsFactors = FALSE)
for (i in 1:rounds) {
sys <- round(runif(1, 1, 3.5), 0)
if (user == 1 & sys == 3) {
result <- "Win"
} else if (user == 3 & sys == 1) {
result <- "Lose"
} else if (user > sys) {
result <- "Win"
} else if (user == sys) {
result <- "Tie"
} else if (user < sys) {
result <- "Lose"
}
df[i, ] <- c(i, x, sps_pair(sys), result)
}
return(df)
}
paperstone(1, 10)
paperstone(2, 10)
runif(10, 1, 3)
runif(10, 1, 3)
runif(10, 1, 3)
runif(10, 1, 3)
round(2.5, 0)
round(2.6, 0)
paperstone(3, 10)
#' Play Scissors-Paper-Stone obsessively!
#'
#' @description
#' Play Scissors-Paper-Stone against R multiple times.
#'
#' @param x Either "Scissors" (or 1), "Stone" (or 2), or "Paper" (or 3)
#' @param rounds Number of rounds, default = 3
#' @return A dataframe containing the following columns for each iteration:
#' \item{Round}{Round number}
#' \item{Player}{Player's Throw}
#' \item{R}{R's Throw}
#' \item{Result}{Result for Player either "Win", "Tie" or "Lose"}
#' @examples
#' paperstone("stone")
#' paperstone(3)
#' paperstone("paper", 10)
paperstone <- function(x, rounds = 3) {
rounds <- as.integer(rounds)
if (x < 4) {x <- sps_pair(x)}
if (is.character(x)) {x <- str_to_title(x)}
user <- sps_pair(x)
if (is.na(rounds)) {"Please enter an integer value for number of attempts!"}
if (user == 4) {
return("Please enter 'scissors'(1), 'stone'(2) or 'paper'(3)!")
}
df = data.frame(Round = numeric(), Player = character(), R = character(), Result = character(),
stringsAsFactors = FALSE)
for (i in 1:rounds) {
sys <- round(runif(1, 0.6, 3.5), 0)
if (user == 1 & sys == 3) {
result <- "Win"
} else if (user == 3 & sys == 1) {
result <- "Lose"
} else if (user > sys) {
result <- "Win"
} else if (user == sys) {
result <- "Tie"
} else if (user < sys) {
result <- "Lose"
}
df[i, ] <- c(i, x, sps_pair(sys), result)
}
return(df)
}
View(hi)
hi = paperstone("paper", 5)
View(hi)
win_stats(hi)
#' Calculate your results from your Scissors-Paper-Stone game!
#'
#' @description
#' Calculates the proportion of a certain outcome for a game of Scissors-Paper-Stone!
#'
#' @param df Dataframe containing output of paperstone()
#' @param outcome Outcome type to be counted, default = "Win"
#' @return The proportion of that outcome in the game.
#' @examples
#' win_stats(game)
#' win_stats(game, "Tie")
win_stats <- function(game, outcome = "Win") {
subset <- game[game$Result == outcome, ]
output <- nrow(subset) / nrow(game)
return(output)
}
document()
?win_stats
document()
?paperstone
document()
document()
document()
document()
document()
check()
document()
check()
use_package('stats')
check()
check()
check()
game = paperstone("paper", 20)
use_data(game)
View(game)
document()
?paperstone
?paperstone::game
??paperstone::game
library(paperstone)
?paperstone::game
??paperstone::game
document()
?paperstone::game
use_testthat()
test()
set.seed(34115)
runif(1, 0.6, 3.5)
set.seed(34115)
game = paperstone("paper", 20)
use_data(game)
use_data(game, overwrite = TRUE)
test()
View(game)
win_stats(game)
win_stats(game, "Lose")
win_stats(game, "Tie")
test()
?win_stats
test()
check()
document()
?paperstone::game
check()
?use_mit_license
use_mit_license("Jolene Lim")
check()
check()
use_readme_rmd()
document()
